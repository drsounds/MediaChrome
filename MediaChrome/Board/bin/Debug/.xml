<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Board</name>
    </assembly>
    <members>
        <member name="T:Board.Skin">
            <summary>
            Skin architecture.
            </summary>
        </member>
        <member name="M:Board.Skin.SetCSSFunctions">
            <summary>
            Sets css wrapper functions
            </summary>
        </member>
        <member name="M:Board.Skin.__css_url(System.String)">
            <summary>
            An wrapper for URL property
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Board.Skin.#ctor(System.String,System.Boolean)">
            <summary>
            Loads an skin from the defined file
            </summary>
            <param name="File">file name of the xml skin</param>
        </member>
        <member name="F:Board.Skin.components">
            <summary>
            List of components
            </summary>
        </member>
        <member name="T:Board.ComponentCollection">
            <summary>
            Defines an collection of components
            </summary>
        </member>
        <member name="T:Board.Component">
            <summary>
            An component to skin
            </summary>
        </member>
        <member name="M:Board.Component.SetCSS(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set CSS values
            </summary>
            <param name="values"></param>
        </member>
        <member name="F:Board.Component.Rel">
            <summary>
            The component to skin (an control or element)
            </summary>
        </member>
        <member name="P:Board.Component.Parent">
            <summary>
            Gets or sets the parent skin
            </summary>
        </member>
        <member name="P:Board.Component.Enabled">
            <summary>
            Gets or sets whether the part of the skin is enabled
            </summary>
        </member>
        <member name="P:Board.Component.fontFamily">
            <summary>
            Family of font
            </summary>
        </member>
        <member name="P:Board.Component.fontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:Board.Component.Font">
            <summary>
            Gets the font
            </summary>
        </member>
        <member name="P:Board.Component.Skin">
            <summary>
            Skin component
            </summary>
        </member>
        <member name="T:Board.CssParser">
            <summary>
            Class for parsing CSS
            </summary>
        </member>
        <member name="M:Board.CssParser.ParseCSSFile(System.String)">
            <summary>
            Parses an set of CSS expressions
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Board.CssParser.ParseCssString(System.String)">
            <summary>
            Function to parse an css clausul.
            </summary>
            <param name="expressions">Ann CSS inline expression { inside }</param>
            <returns>An dictionary of expressions inside</returns>
        </member>
        <member name="P:Board.CssParser.Source">
            <summary>
            Source code
            </summary>
        </member>
        <member name="T:Board.CListView">
            <summary>
            Description of CListView.
            </summary>
        </member>
        <member name="M:Board.Scrollbar.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the current state of the scrollbar
            </summary>
            <param name="g">Graphics engine to draw on</param>
        </member>
        <member name="F:Board.Scrollbar.frontY">
            <summary>
            Space between the top of the thumb and the mouse cursor in pixels
            </summary>
        </member>
        <member name="F:Board.Scrollbar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Board.Scrollbar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Board.Scrollbar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Board.Scrollbar.Host">
            <summary>
            The drawboard the scrollbar belongs to
            </summary>
        </member>
        <member name="E:Board.Scrollbar.Scrolling">
            <summary>
            Raises when moving the scrollbar
            </summary>
        </member>
        <member name="P:Board.Scrollbar.FreeSpace">
            <summary>
            Gets the free space of the thumbs space
            </summary>
        </member>
        <member name="P:Board.Scrollbar.ScrollSize">
            <summary>
            Gets scale of the scrollbar
            </summary>
        </member>
        <member name="P:Board.Scrollbar.ThumbHeight">
            <summary>
            Gets or set the size of thumb - below 100
            </summary>
        </member>
        <member name="P:Board.Scrollbar.SpaceHeight">
            <summary>
            Gets the height of the space
            </summary>
        </member>
        <member name="P:Board.Scrollbar.Position">
            <summary>
            Gets or sets the position of the scrollbar
            </summary>
        </member>
        <member name="P:Board.Scrollbar.ThumbPosition">
            <summary>
            Gets the Y-positiono of the thumb
            </summary>
        </member>
        <member name="P:Board.Scrollbar.Dragging">
            <summary>
            Gets or sets if the scrollbar is dragging
            </summary>
        </member>
        <member name="T:Board.Scrollbar.ScrollEventArgs">
            <summary>
            Class for scrolling event args
            </summary>
        </member>
        <member name="P:Board.Scrollbar.ScrollEventArgs.Position">
            <summary>
            The position of the scroll
            </summary>
        </member>
        <member name="T:Board.Scrollbar.ScrollEventHandler">
            <summary>
            Delagate for handling scrolling events
            </summary>
            <param name="Sender">the object which raised the delegate's event</param>
            <param name="e">Arguments provided with the event</param>
        </member>
        <member name="T:Board.ViewError">
            <summary>
            Form to show about an view error
            </summary>
        </member>
        <member name="M:Board.ViewError.#ctor(System.String,System.String)">
            <summary>
            Custom constructor for ViewError, where you specify the
            info to the user about the error.
            </summary>
            <param name="View"></param>
            <param name="error"></param>
        </member>
        <member name="F:Board.ViewError.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Board.ViewError.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Board.ViewError.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Board.MakoParser.TestContent(System.String)">
            <summary>
            Method to test content, output both preparsed and parsed content
            </summary>
            <param name="file"></param>
        </member>
        <member name="F:Board.MakoParser.Engine">
            <summary>
            Our test engine
            </summary>
        </member>
        <member name="F:Board.MakoParser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Board.MakoParser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Board.MakoParser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Board.frmBoard.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Board.frmBoard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Board.frmBoard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Board.frmBoard.LoadContent(System.String)">
            <summary>
            Method to load an example content
            </summary>
            <param name="address"></param>
        </member>
        <member name="T:Board.Resource1">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Board.Resource1.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Board.Resource1.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Board.IBoardRender">
            Abstract drawing engine for the board
            
        </member>
        <member name="M:Board.IBoardRender.Initialize">
            <summary>
            Initializes the engine
            </summary>
        </member>
        <member name="M:Board.IBoardRender.Destroy">
            <summary>
            Clear the plate
            </summary>
        </member>
        <member name="M:Board.IBoardRender.DrawRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws an rectangle
            </summary>
            <param name="left">x</param>
            <param name="top">y</param>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:Board.IBoardRender.DrawImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Draws an image with the specified coordinates. Should be scaled
            
            </summary>
            <param name="image"></param>
            <param name="Bounds"></param>
        </member>
        <member name="M:Board.IBoardRender.DrawImage(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Draws an image with the specified coordinates. Should be scaled
            
            </summary>
            <param name="image"></param>
            <param name="Bounds"></param>
        </member>
        <member name="M:Board.IBoardRender.DrawLine(System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws an line.
            </summary>
            <remarks>Points are absolute, not relative to each other</remarks>
            <param name="color">Color of the line</param>
            <param name="start">Starting point</param>
            <param name="end">End point</param>
        </member>
        <member name="M:Board.IBoardRender.DrawString(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws an string. If the string exceeds the bounds,
            clip it.
            </summary>
            <param name="str">The string to draw</param>
            <param name="font">The font to use</param>
            <param name="Bounds">The bounds</param>
            <param name="shadow">Decides if the string should have an shadow</param>
        </member>
        <member name="M:Board.IBoardRender.DrawString(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Point)">
            <summary>
            Draws an string. If the string exceeds the bounds,
            clip it.
            </summary>
            <param name="str">The string to draw</param>
            <param name="font">The font to use</param>
            <param name="Bounds">The bounds</param>
            <param name="shadow">Decides if the string should have an shadow</param>
        </member>
        <member name="M:Board.IBoardRender.Clear(System.Drawing.Color)">
            <summary>
            Clear the drawing cache and fill the 
            output with the specified color.
            </summary>
            <param name="color">The color to fill</param>
        </member>
        <member name="M:Board.IBoardRender.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Fills an rectangle
            </summary>
            <param name="bgColor"></param>
        </member>
        <member name="M:Board.IBoardRender.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Fills an rectangle
            </summary>
            <param name="bgColor"></param>
        </member>
        <member name="M:Board.IBoardRender.Render">
            <summary>
            Render the graphics to the output
            </summary>
        </member>
        <member name="P:Board.IBoardRender.Surface">
            <summary>
            Gets or sets the surface which 
            returns the drawing cache
            </summary>
        </member>
        <member name="T:Board.MakoEngine">
            <summary>
            This is an simple MakoEngine implementation for Jint.
            Used to minic the Spotify's view engine.
            
            </summary>
        </member>
        <member name="M:Board.MakoEngine.__printx(System.String)">
            <summary>
            Callback where the output is thrown to, called by the parsed string
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Board.MakoEngine.synchronize_data(System.String)">
            <summary>
            Synchronize data is called by the javascript preparser to get an ready to use JSON parsed data. If the dat can't be parsed as JSON
            it will be returned as an common string
            </summary>
            <param name="uri">The address to the remote information to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Board.MakoEngine.HandleToTokens(System.String,System.Char)">
            <summary>
            Function to convert variable signatures to variable concations for the parser
            </summary>
            <param name="Line"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Board.MakoEngine.GetVariables(System.String,System.Char)">
            <summary>
            This function returns variable from the parser embedded in an output field, asserted with an custom sign {VARNAME}
            </summary>
            <param name="Line">The code line to execute</param>
            <param name="signature">The char signature</param>
            <returns>An list of processed variables</returns>
        </member>
        <member name="M:Board.MakoEngine.ExecuteScalarVariable(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            This function executes the scalar variable, works together with GetVariable. It will also parse the inherited 
            codebase.
            </summary>
            <param name="Variable"></param>
            <param name="reflector">Reflector divides which is the conditinoal statement and the boolean output</param>
            <param name="divider">Boolean divider</param>
            <param name="vetero">Which variable beside the reflector divider should be present in fallback</param>
            <value>Returns an 2 field String array where {InitialVariableName,Output}</value>
            <returns></returns>
        </member>
        <member name="M:Board.MakoEngine.Execute(System.String)">
            <summary>
            This function executes string in the js mako engine
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Board.MakoEngine.Preprocess(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            This function preprosses the mako layer
            </summary>
            <param name="input">The input string to parse</param>
            <param name="argument">The argument sent to the parser</param>
        </member>
        <member name="P:Board.MakoEngine.OldOutput">
            <summary>
            Returns the old output
            </summary>
        </member>
        <member name="P:Board.MakoEngine.JSPython">
            <summary>
            The javascript will be like as python
            </summary>
        </member>
        <member name="P:Board.MakoEngine.RuntimeMachine">
            <summary>
            Instance of the Jint engine running at runtime
            </summary>
        </member>
        <member name="T:Board.MakoEngine.CreateEventHandler">
            <summary>
            Raises the create event handler. Useful to add features to the engine before running
            </summary>
            <param name="sender">The current instance of MakoEngine</param>
            <param name="e">EventArg</param>
        </member>
        <member name="T:Board.MainForm">
            <summary>
            Description of MainForm.
            </summary>
        </member>
        <member name="M:Board.Spofity.GoBack">
            <summary>
            Goback an section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.GoForward">
            <summary>
            Go forward an sectionn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.PlayItem(Board.Element,System.Int32,System.Int32)">
            <summary>
            Play an item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Board.Spofity.__downloadContentAsync(System.String,System.String)">
            <summary>
            Called by the script to initiate an ajax-like process of new elements
            </summary>
            <param name="adress"></param>
            <param name="callback"></param>
            <returns>true if sucess, false if not</returns>
        </member>
        <member name="M:Board.Spofity.GetPlayingSection">
            <summary>
            Get the section which has the current playing item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.PreviousSong">
            <summary>
            Set item after current playing as next song.
            </summary>
        </member>
        <member name="M:Board.Spofity.NextSong">
            <summary>
            Set item after current playing as next song.
            </summary>
        </member>
        <member name="M:Board.Spofity.AppendElementAttributes(Board.Element@,System.Xml.XmlElement)">
            <summary>
            This method will convert the xml attributes to element attributes
            </summary>
            <param name="elm">The target element to manage (reference)</param>
            <param name="node">The element to inherit the attributes from</param>
        </member>
        <member name="M:Board.Spofity.SynchronizeData(System.String)">
            <summary>
            Fetch data from either hard drive or remote web address
            </summary>
            <param name="address"></param>
            <returns>the text data if success, "ERROR "+Message if failed</returns>
        </member>
        <member name="M:Board.Spofity.__getElementsByTagName(System.String)">
            <summary>
            callback for manipulation of layout elements during runtime
            </summary>
            <param name="name">the name of the tag</param>
        </member>
        <member name="M:Board.Spofity.__getElementId(System.String)">
            <summary>
            callback for manipulation of layout elements during runtime
            </summary>
            <param name="name">the name of the tag</param>
        </member>
        <member name="M:Board.Spofity.__setContent(System.Object,System.String)">
            <summary>
            Method to set inner content of an element from scripside
            </summary>
            <param name="element"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.__setAttribute(System.Object,System.String,System.String)">
            <summary>
            Method to set an attribute to an certin value on an layout element
            </summary>
            <param name="element"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.GetElementById(System.Xml.XmlElement,System.String)">
            <summary>
            Own implementation of getElementById as XmlDocument's getelementsbyId could not be
            used without DTD
            </summary>
            <param name="src">the xml document to work on</param>
            <param name="ID">the id of the element to find</param>
            <remarks>This function is recursive</remarks>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.__commit_changes">
            <summary>
            This method should be called by the scripting engine after an modification so the element
            buffer will be rebuilt with the changes in the layout engine.
            </summary>
        </member>
        <member name="M:Board.Spofity.InflateView(Board.Section,Board.Element,System.Xml.XmlNode)">
            <summary>
            DATE: 2011-04-20
            If the tag name is %Inflater the element can inflate another view,
            preparse it according to arbitrary parameters and then
            return it to this layer. 
            </summary>
            <param name="CT">The element to use as inflater caller</param>
            <param name="host">The element to inflate from</param>
            <remarks>
            The script running when inflating the child view is not able to interact with the host session,
            and have their own scope.
            </remarks> 
        </member>
        <member name="M:Board.Spofity.RenderElements(Board.Section,Board.Element,System.Xml.XmlElement)">
            <summary>
            This is an recursive method which will create elements to the 
            Board to view.
            </summary>
            <remarks>This function calls iself. The amount of elements supported is limited to enasure portably and does not follow the whole w3c web standard</remarks>
            <param name="C">The base element to begin on</param>
            <param name="iSection">The section to start with</param>
            <param name="srcSection">The section for the elements to apply on, used by the inflater</param>
        </member>
        <member name="M:Board.Spofity.ExtractTagAttributes(Board.Element,System.String)">
            <summary>
            Extract all [attrb=value] implented in the string and return the tag name
            
            </summary>
            <param name="Output">The element to apply</param>
            <param name="tag">The tag to harash</param>
            <returns></returns>
        </member>
        <member name="M:Board.Spofity.ExtractTag(System.Int32@,System.Int32@,System.String,Board.Element)">
            <summary>
            Extract element from tag and put it into CT
            </summary>
            <param name="i">ref int to position</param>
            <param name="cf"></param>
            <param name="CT"></param>
        </member>
        <member name="M:Board.Spofity.RenderSection(Board.Section,System.Xml.XmlElement)">
            <summary>
            This is an recursive method which will create elements on an section
            Board to view.
            </summary>
            <remarks>This function calls iself. The amount of elements supported is limited to enasure portably and does not follow the whole w3c web standard</remarks>
            <param name="C">The base element to begin on</param>
            <param name="iSection">The section to start with</param>
        </member>
        <member name="M:Board.Spofity.Render(System.Xml.XmlDocument)">
            <summary>
            Render the layoutElements into real elements
            </summary>
        </member>
        <member name="F:Board.Spofity.xmlHashCode">
            <summary>
            Hashcode of the LayoutElements XMLDocument
            </summary>
        </member>
        <member name="M:Board.Spofity.CheckPendingChanges">
            <summary>
            Returns whether the LayoutElements has been changed since last occuration
            </summary>
        </member>
        <member name="M:Board.Spofity.UpdateAsync">
            <summary>
            Should be called from an background thread to update the layout elements to new ones. 
            </summary>
        </member>
        <member name="M:Board.Spofity.SetScriptFunctionality">
            <summary>
            Method to configure scripts dom manipulation functions on layout element
            </summary>
        </member>
        <member name="M:Board.Spofity.#ctor(Board.DrawBoard)">
            <summary>
            Load an custom HTML page into the special section.
            
            It have to be preparsed by the MakoEngine.
            </summary>
            <remarks>Objects must now call Initialize to make it work perform. The reason for change is to make it able to set event handlers for MakoCreation</remarks>
            <param name="data">The ready preprocessed data from Mako alt. common html data</param>
        </member>
        <member name="M:Board.Spofity.Initialize(System.String,System.String,System.String,Board.MakoEngine)">
            <summary>
            Initializes the view
            </summary>
            <param name="data"></param>
            <param name="engine"></param>
            <param name="pretemplate">The mako syntaxed template. Used for recurring updates</param>
        </member>
        <member name="P:Board.Spofity.Live">
            <summary>
            Gets or sets if the view is live
            </summary>
        </member>
        <member name="P:Board.Spofity.HistorySections">
            <summary>
            History of section
            </summary>
        </member>
        <member name="P:Board.Spofity.ForwardSections">
            <summary>
            History of forward sections
            </summary>
        </member>
        <member name="E:Board.Spofity.MakoGeneration">
            <summary>
            Occurs when the mako template engine has been init
            </summary>
        </member>
        <member name="P:Board.Spofity.ParentView">
            <summary>
            Gets or sets the parent view for this Spofity instance
            </summary>
        </member>
        <member name="E:Board.Spofity.PlaybackStarted">
            <summary>
            occurs when an track has been choosed for playback
            </summary>
        </member>
        <member name="P:Board.Spofity.LayoutElements">
            <summary>
            This variable holds the collection of the elements at the Layout Element phase
            </summary>
        </member>
        <member name="P:Board.Spofity.ScriptEngine">
            <summary>
            The instance to the script engine that rendered the layout elements, and will continue it's lifecycle as helper
            scripts for various tasks after the preprocessing.
            </summary>
        </member>
        <member name="P:Board.Spofity.Engine">
            <summary>
            The instance of the makoEngine that rendered the view.
            </summary>
        </member>
        <member name="P:Board.Spofity.Receivers">
            <summary>
            List with all content receivers. It are checked regulary for finished downloads.
            </summary>
        </member>
        <member name="P:Board.Spofity.Playlist">
            <summary>
            The drawboard has an playlist stack which is used for listing of media items.
            </summary>
        </member>
        <member name="P:Board.Spofity.NowPlaying">
            <summary>
            The element which represents the now playing song
            </summary>
        </member>
        <member name="P:Board.Spofity.ParentBoard">
            <summary>
            The drawboard this view is attached to
            </summary>
        </member>
        <member name="P:Board.Spofity.TemplateCode">
            <summary>
            Holds the preprocessed template
            </summary>
        </member>
        <member name="P:Board.Spofity.Parameter">
            <summary>
            The view instances parameter
            </summary>
        </member>
        <member name="T:Board.Spofity.MakoCreateEventHandler">
            <summary>
            Delegate which manage events for mako creation
            </summary>
            <param name="sender">the current instance to mako</param>
            <param name="e">eventargs</param>
        </member>
        <member name="T:Board.Spofity.ElementPlaybackStarted">
            <summary>
            Delegate to manage playbacks from the view's list
            </summary>
            <param name="sender">The element sender</param>
            <param name="uri">The uri to the current playing</param>
            <returns>A boolean whether the playing could be started or not</returns>
        </member>
        <member name="T:Board.Spofity.ContentReceiver">
            <summary>
            Content receiver is an class which performs as an storage of downloaded content, which will be handled
            separetely
            </summary>
        </member>
        <member name="M:Board.Spofity.ContentReceiver.DownloadData">
            <summary>
            Synchronize data is called by the javascript preparser to get an ready to use JSON parsed data. If the dat can't be parsed as JSON
            it will be returned as an common string
            </summary>
            <param name="receiver">An boxed instance of an ContentReceiver class</param>
            <returns></returns>
        </member>
        <member name="P:Board.Spofity.ContentReceiver.Adress">
            <summary>
             The adress to the remote or local resource
            </summary>
        </member>
        <member name="P:Board.Spofity.ContentReceiver.Package">
            <summary>
            The object received. Package is an boxed false if the download were incomplete.
            </summary>
        </member>
        <member name="P:Board.Spofity.ContentReceiver.Ready">
            <summary>
            Returns if the ContentReceiver has finished transmittion of content
            </summary>
        </member>
        <member name="P:Board.Spofity.ContentReceiver.Callback">
            <summary>
            The callback of the event to raise together with the package once deliverd
            </summary>
        </member>
        <member name="T:Board.Section">
            <summary>
            Element class.
            </summary>
        </member>
        <member name="M:Board.Section.RenderLayout">
            <summary>
            Resets the ptop and reorder the layout
            </summary>
        </member>
        <member name="M:Board.Section.Sort(System.String,Board.Section.SortMode)">
            <summary>
            Sort elements
            </summary>
            <param name="column"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Board.Section.RealIndexToEntryIndex(System.Int32)">
            <summary>
            Convert the physical index to real index. Moved from Spofity.CS
            </summary>
            <param name="index">the real index</param>
            <returns>The virtual entry index, -1 if failed or the index points to an item of not an entry</returns>
        </member>
        <member name="M:Board.Section.InsertEntryAt(System.Collections.Generic.List{Board.Element},System.Int32)">
            <date>2011-04-24 16:18</date>
            <summary>
            Insert item at position which is synchronised with the range of items only by entries
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Board.Section.InsertEntryAt(Board.Element,System.Int32)">
            <date>2011-04-24 16:18</date>
            <summary>
            Insert item at position which is synchronised with the range of items only by entries
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Board.Section.AssertScroll">
            <summary>
            Updates the scrollbar
            </summary>
        </member>
        <member name="M:Board.Section.RebuildList">
            <summary>
            Rebuilds the collection
            </summary>
        </member>
        <member name="M:Board.Section.GenerateFilterView(System.String)">
            <summary>
            Generates an filter view according to the query
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Board.Section.EntryAt(System.Int32)">
            <summary>
            Returns an entry at the specified index.
            </summary>
            <remarks>Only elements of type "entry" is indexed</remarks>
            <param name="index">The position of the element to find</param>
            <returns>An element if found at the location, NULL otherwise</returns>
        </member>
        <member name="M:Board.Section.AddElement(Board.Element,Board.Spofity)">
            <summary>
            Short way to add element
            </summary>
            <param name="d"></param>
            <param name="X"></param>
        </member>
        <member name="F:Board.Section.rawList">
            <summary>
            This is the unmodified list of elements in an section of an view.
            </summary>
        </member>
        <member name="P:Board.Section.SortedBuffer">
            <summary>
            Buffer for sorted elements
            </summary>
        </member>
        <member name="P:Board.Section.Sorter">
            <summary>
            This class  defines an sorter
            </summary>
        </member>
        <member name="P:Board.Section.ItemOffset">
            <summary>
            Gets the difference between the total height of 
            the elements and the height of the visible boundary
            </summary>
        </member>
        <member name="P:Board.Section.TotalHeight">
            <summary>
            This function calculates the scrol offset of items. Returns -1 if there is an problem
            </summary>
        </member>
        <member name="P:Board.Section.ScrollY">
            <summary>
            ScrollY
            </summary>
        </member>
        <member name="P:Board.Section.Flow">
            <summary>
            Defines an horizontal stream of elements.
            </summary>
        </member>
        <member name="P:Board.Section.ColumnHeaders">
            <summary>
            Columnheeaders for use in list mode
            </summary>
        </member>
        <member name="P:Board.Section.Reorder">
            <summary>
            Gets or sets whether the entries in the view can be reordered.
            </summary>
        </member>
        <member name="P:Board.Section.Locked">
            <summary>
            Gets or sets if the view are locked for edit.
            </summary>
        </member>
        <member name="P:Board.Section.FilterView">
            <summary>
            An temporary view if filtered.
            </summary>
        </member>
        <member name="P:Board.Section.Filter">
            <summary>
            An instance of the abstract class ViewFilter
            </summary>
        </member>
        <member name="P:Board.Section.FilterQuery">
            <summary>
            Gets and sets the filtering query. 
            </summary>
        </member>
        <member name="E:Board.Section.PlaybackItemChanged">
            <summary>
            Occurs when playback has been interrupted.
            </summary>
        </member>
        <member name="P:Board.Section.Parent">
            <summary>
            The parent Spofity hosting the view
            </summary>
        </member>
        <member name="P:Board.Section.NowPlaying">
            <summary>
            Gets the current playing entry
            </summary>
        </member>
        <member name="P:Board.Section.PlayIndex">
            <summary>
            The index of the current item
            </summary>
        </member>
        <member name="P:Board.Section.SelectedIndex">
            <summary>
            Gets and sets the selected index . Returns -1 if no entries was found. Applies only with elements of type "entry".
            </summary>
        </member>
        <member name="P:Board.Section.List">
            <summary>
            Gets and sets if the Element is in an list mode. A list mode will draw column headers straight before the
            first entry element and associate it with screen top if the element are outside the screen boundary.
            </summary>
        </member>
        <member name="P:Board.Section.CountItems">
            <summary>
            Definite count of items. Obsolute
            </summary>
        </member>
        <member name="P:Board.Section.Elements">
            <summary>
            The visible elements in an view
            </summary>
        </member>
        <member name="T:Board.Section.SortMode">
            <summary>
            Mode of sorting
            </summary>
        </member>
        <member name="T:Board.Section.IViewFilter">
            <summary>
            In order to be able to use filter, an instance of an inherited class will assert the filtered query
            </summary>
        </member>
        <member name="M:Board.Section.IViewFilter.FilterElement(Board.Element,System.String)">
            <summary>
            Must be implemented to filter
            </summary>
            <param name="src"></param>
            <returns>Wheather the element is visible or not</returns>
        </member>
        <member name="T:Board.Element">
            <summary>
            An element represents the object drawn on the Board class in an particular view
            </summary>
        </member>
        <member name="M:Board.Element.SetStyle(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set an inline style for the element. WORK in progress
            </summary>
            <param name="Style"></param>
        </member>
        <member name="M:Board.Element.AssertFont">
            <summary>
            Asserts font of the object by their attributes
            </summary>
        </member>
        <member name="M:Board.Element.Copy">
            <summary>
            Copies the instance to a new element
            </summary>
            <returns>An instance of an copy of this instance</returns>
        </member>
        <member name="F:Board.Element.FirstCall">
            <summary>
            Gets and sets whether the object has been called. Currently this property is used to call image download
            handler when it tries to draw at the first time but prevent it are done always.
            </summary>
        </member>
        <member name="M:Board.Element.ElementAt(System.Int32)">
            <summary>
            Find the textual position of the element
            </summary>
            <param name="pos"></param>
            <returns>An element if found, NULL otherwise</returns>
        </member>
        <member name="M:Board.Element.GetCoordinates(System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Returns coordinates coordinates for the object bounds
            </summary>
            <param name="scrollX">scrollX coordinate on view's state</param>
            <param name="scrollY">scrollY coordinate on view's state</param>
            <param name="top">Reference to top integer to set an dynamtic top positon (if asserted @TOP (-1))</param>
            <param name="Bounds">The bounds the object is residing in</param>
            <param name="padding">Padding rules applied to the workspace object relying in</param>
            <returns>an boolean wheather the object is inside the visible screen bounds</returns>
            
        </member>
        <member name="M:Board.Element.InsideScreen(System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Function to measure wheather the element is inside the screen bounds, eg. visible
            </summary>
            <param name="scrollX">the scrollX position</param>
            <param name="scrollY">the scrollY position</param>    
            <param name="Bounds">The bounds the object is residing in</param>
            <param name="padding">Padding rules applied to the workspace object relying in</param>
            <returns></returns>
        </member>
        <member name="F:Board.Element.stylesheet">
            <summary>
            Stylesheet applied to the element. Not yet in use, only declared
            </summary>
        </member>
        <member name="M:Board.Element.AssertBounds(System.Boolean)">
            <summary>
            Assign bounds of the object according to the parameters that is set in the textual parameter list (attributes)
            </summary>
        </member>
        <member name="M:Board.Element.SetAttribute(System.String,System.String)">
            <summary>
            Function to set an attribute of the node.
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="value">the value of the attribute</param>
        </member>
        <member name="M:Board.Element.AssertSelection">
            <summary>
            Scroll so the selected will be visible
            </summary>
        </member>
        <member name="F:Board.Element.attributes">
            <summary>
            An list of arbitrary attributes applied to the object. These attributes provides the properties coming from
            the underlying input and are managed by the application. 
            </summary>
        </member>
        <member name="P:Board.Element.Tag">
            <summary>
            Store an boxed instance of any class in the element
            </summary>
        </member>
        <member name="P:Board.Element.ImagePending">
            <summary>
            Returns if the element has an pending image
            </summary>
        </member>
        <member name="P:Board.Element.ImageRequested">
            <summary>
            Gets or sets if the image has ben requested.
            </summary>
        </member>
        <member name="P:Board.Element.Entry">
            <summary>
            This elemeent can be selected and represents an entry
            </summary>
        </member>
        <member name="P:Board.Element.Attachment">
            <summary>
            A object that can be attached to the element
            </summary>
        </member>
        <member name="P:Board.Element.InnerXML">
            <summary>
             Inner XML
            </summary>
        </member>
        <member name="P:Board.Element.Font">
            <summary>
            Font for element's textContent
            </summary>
        </member>
        <member name="P:Board.Element.Original">
            <summary>
            Gets the instance of the elements which it wa copied from or Null if it wasn't an copy. Used in the filter   system
            </summary>
        </member>
        <member name="P:Board.Element.Bitmap">
            <summary>
            Bitmap contents of the element
            </summary>
        </member>
        <member name="P:Board.Element.IsCopy">
            <summary>
            Gets whether this elements is an copy of another element or an original. Used in the filter system
            </summary>
        </member>
        <member name="P:Board.Element.TextPosition">
            <summary>
            Text position for embedding the element inside a text block
            </summary>
        </member>
        <member name="P:Board.Element.Persistent">
            <summary>
            Gets and set the persistency. If true, the ptop will not be 
            changed after appending but will use the last valueo of it.
            </summary>
        </member>
        <member name="P:Board.Element.ptop">
            <summary>
            ptop is to auto-align elements which has no valid top location - eg. smaller 
            than zero and should be applied in this way. Default is 20 so we ge an margin at the top
            </summary>
        </member>
        <member name="P:Board.Element.Bounds">
            <summary>
            Gets the object's bounds in absolute rectangle
            </summary>
        </member>
        <member name="P:Board.Element.Top">
            <summary>
            Gets and set the top of the element
            </summary>
        </member>
        <member name="P:Board.Element.Left">
            <summary>
            Gets and set the left position of the element
            </summary>
        </member>
        <member name="P:Board.Element.Width">
            <summary>
            Gets and sets the width of the element. Width below one is considered as filling width.
            </summary>
        </member>
        <member name="P:Board.Element.Height">
            <summary>
            Gets and sets the height of the element. Values below one is considered as filling vertically.
            </summary>
        </member>
        <member name="P:Board.Element.Data">
            <summary>
            Gets and sets the raw data of the object. For example an text node will has its content stored in this
            property.
            </summary>
        </member>
        <member name="P:Board.Element.ParentHost">
            <summary>
            The drawboard the element is drawn on
            </summary>
        </member>
        <member name="P:Board.Element.Selected">
            <summary>
            Gets and sets whether the object is selected on the graphical board
            </summary>
        </member>
        <member name="P:Board.Element.Type">
            <summary>
            Gets and sets the type of element. 
            </summary>
        </member>
        <member name="P:Board.Element.Elements">
            <summary>
            Child elements of the element. All elements can contain own child nodes, but their behaviour and functionality
            depends of the target implementation.
            </summary>
        </member>
        <member name="T:Board.Element.ElementCollection">
            <summary>
            Class for defining children element collection
            </summary>
        </member>
        <member name="F:Board.DrawBoard.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Board.DrawBoard.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Board.DrawBoard.SetColors">
            <summary>
            Set default colors
            </summary>
        </member>
        <member name="F:Board.DrawBoard.board">
            <summary>
            The drawing board
            </summary>
        </member>
        <member name="F:Board.DrawBoard.surface">
            <summary>
            The drawing buffer
            </summary>
        </member>
        <member name="M:Board.DrawBoard.Filter(System.String,Board.Section.IViewFilter)">
            <summary>
            Filter the view according to the query
            </summary>
            <param name="query">The query to filter</param>
            <param name="filter">An instance to an implemented IViewFilter class for filter rules</param>
        </member>
        <member name="M:Board.DrawBoard.ElementClick(Board.Element,System.Int32,System.Int32)">
            <summary>
            Raises a click to the specified elemetn if the mouseX/Y is in bounds
            </summary>
            <param name="_Element"></param>
            <param name="mouseX"></param>
            <param name="mouseY"></param>
        </member>
        <member name="F:Board.DrawBoard.Columns">
            <summary>
            Column widths. They are used for the entries. -1 means until end of size
            </summary>
        </member>
        <member name="M:Board.DrawBoard.UpdateView(Board.DrawBoard.View)">
            <summary>
            Force update of an certain instance of a view
            </summary>
            <param name="srcView">The view instance</param>
        </member>
        <member name="M:Board.DrawBoard.LoadViewAsync(System.Object)">
            <summary>
            Method to load an view asynchronisly
            </summary>
            <param name="address"></param>
        </member>
        <member name="F:Board.DrawBoard.CurrentQueue">
            <summary>
            Current play queue
            </summary>
        </member>
        <member name="M:Board.DrawBoard.R_PlaybackStarted(System.Object,Board.Element,System.String)">
            <summary>
            Proxy event handler for playback
            </summary>
            <param name="sender"></param>
            <param name="elm"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Board.DrawBoard.Navigate(System.String,System.String,System.String)">
            <summary>
            Public method to navigate.
            </summary>
            <param name="Uri">The name of the view</param>
            <param name="nspace">Namespace for the uri (xx:)</param>
            <param nme="BaseFolder">The base folder where the .xml view files reside</param>
        </member>
        <member name="M:Board.DrawBoard.DownloadImage(System.Object)">
            <summary>
            Method to asynchronisly download an image to an img element
            </summary>
            <param name="token">A element to use</param>
        </member>
        <member name="M:Board.DrawBoard.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Graphics,System.Boolean)">
            <date>2011-04-25 12:04</date>
            <summary>
            Draws an image
            </summary>
            <param name="image">The image to draw</param>
            <param name="Bounds">The bounds of the image</param>
            <param name="g">The graphics</param>
            <param name="hasShadow">Decides whether image should have an shadow</param>
        </member>
        <member name="M:Board.DrawBoard.D_FinishedLoading">
            <summary>
            Executes when the loading of the page has been finished and downloading images
            </summary>
        </member>
        <member name="M:Board.DrawBoard.GetElementById(System.String)">
            <summary>
            Function to get an specific element by ID.
            </summary>
            <param name="ID">the id of the element</param>
            <returns>The element if found, null otherwise</returns>
        </member>
        <member name="M:Board.DrawBoard.GetItemAtPos(System.Drawing.Point)">
            <date>2011-04-24 15:17 </date>
            <summary>
            Function to get an element underlying the position. Relative to scrollX/scrollY
            </summary>
            <param name="point"></param>
            <returns>The element on the spot or NULL if not</returns>
        </member>
        <member name="M:Board.DrawBoard.GetItemAt(System.Int32)">
            <summary>
            Method to get an particular item of type entry at an certain index (only items of type entry included)
            </summary>
            <returns>An element by type entry at the specified position or NULL if no elements where found or an exception was thrown</returns>
            <param name="pos">The index of the element</param>
            <remarks>Only elements of type entries is accessible.</remarks>
        </member>
        <member name="M:Board.DrawBoard.PreviousSong">
            <summary>
            Play previous song
            </summary>
        </member>
        <member name="M:Board.DrawBoard.NextSong">
            <summary>
            Play next song
            </summary>
        </member>
        <member name="M:Board.DrawBoard.AddItem(System.String,System.String,System.String[],System.String[],System.Int32,System.Int32)">
            <summary>
            Method to add new items to the list at runtime. Only applies to item of type 'entry'
            </summary>
            <param name="Uri">The uri of the item</param>
            <param name="Title">The title of the item</param>
            <param name="Attributs">String array of attributes</param>
            <param name="uris">String array of uris (hrefs) of attributes</param>
        </member>
        <member name="M:Board.DrawBoard.GetPlayingSection">
            <summary>
            Get the section which has the current playing item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Board.DrawBoard.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Method to handle keys in list
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Board.DrawBoard.ParseTag(System.String,System.Int32@)">
            <summary>
            Parses an tag and result it as an element
            </summary>
            <param name="src">The source string</param>
            <param name="i">Current position of the string</param>
            <returns>An element</returns>
        </member>
        <member name="M:Board.DrawBoard.MeasureDisplayStringWidth(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            From CodeProject.org
            http://www.codeproject.com/KB/GDI-plus/measurestring.aspx
            </summary>
            <param name="graphics"></param>
            <param name="text"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Board.DrawBoard.DrawText(System.String,Board.Element,System.Drawing.SolidBrush,System.Drawing.Font,System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Method to dynamically draw text and include subsets of elements inside the markup of the text
            </summary>
            <param name="elm"></param>
            <param name="font">The font to use (measuring scale)</param>
            <param name="g">The graphics to use</param>
            <param name="position">Rectangle of position</param>
            <param name="left">Left position of character start</param>
            <param name="row">row on character start</param>
        </member>
        <member name="M:Board.DrawBoard.DrawElement(Board.Element,System.Drawing.Graphics,System.Int32@,System.Drawing.Rectangle,System.Int32,System.Int32@,System.Int32@)">
            <param name="entryship">The number of entry placed</param>
        </member>
        <member name="F:Board.DrawBoard.tab_distance">
            <summary>
            Distance between tabs
            </summary>
        </member>
        <member name="F:Board.DrawBoard.inactive_section_tab">
            <summary>
            Bitmap for the inactive section tab
            </summary>
        </member>
        <member name="F:Board.DrawBoard.sectionTab">
            <summary>
            Bitmap for the section tab
            </summary>
        </member>
        <member name="F:Board.DrawBoard.tabbar_start">
            <summary>
             the horizontal position where the tab starts
            </summary>
        </member>
        <member name="F:Board.DrawBoard.tabbar_height">
            <summary>
             height of the bounding_box
            </summary>
        </member>
        <member name="F:Board.DrawBoard.tab_width">
            <summary>
            Width for active section tab
            </summary>
        </member>
        <member name="F:Board.DrawBoard.scrollbar_size">
            <summary>
            Primary size for the scrollbar 
            </summary>
        </member>
        <member name="F:Board.DrawBoard.columnheader_height">
            <summary>
            Height of columnheader
            </summary>
        </member>
        <member name="M:Board.DrawBoard.DrawHeaders(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Method t odraw the ColumnHeaders
            </summary>
            <param name="p">The graphic engine to use</param>
            <param name="point"> The point to draw the columnheader on</param>
        </member>
        <member name="F:Board.DrawBoard.reoredering">
            <summary>
            Determines if an reordering progress is ongoing.
            </summary>
        </member>
        <member name="F:Board.DrawBoard.hovered_tab">
            <summary>
            Draw inside an certain view. Mouse events are measured here instead of mousemove
            </summary>
            <param name="p">The graphics buffer</param>
            <param name="CurrentView"> The view to base from</param>
        </member>
        <member name="F:Board.DrawBoard.resizeFlow">
            <summary>
            Gets or sets if an resize of the flowbar is ongoing
            </summary>
        </member>
        <member name="M:Board.DrawBoard.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the view
            </summary>
            <param name="p">The graphics to draw with</param>
        </member>
        <member name="M:Board.DrawBoard.DrawFlowElement(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)">
            <summary>
            Draws an element in the flow
            </summary>
            <param name="startPos"></param>
            <param name="visible_count"></param>
            <param name="flowHeight"></param>
            <param name="elmTop"></param>
            <param name="padding"></param>
            <param name="i"></param>
            <param name="d"></param>
        </member>
        <member name="M:Board.DrawBoard.GetElementFlow``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Return an element as an flow
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="index"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:Board.DrawBoard.ViewExist">
            <summary>
            Returns if an active view exists
            </summary>
            <returns></returns>
        </member>
        <member name="F:Board.DrawBoard.scrolling">
            <summary>
            Gets or sets whether the cursor is attached (is scrolling) on the scrollbar thumb if the returned offset is more than -1.
            </summary>
        </member>
        <member name="F:Board.DrawBoard.rawSource">
            <summary>
            The raw data before mako preprocess
            </summary>
        </member>
        <member name="F:Board.DrawBoard.output">
            <summary>
            The output of Mako
            </summary>
        </member>
        <member name="F:Board.DrawBoard.ME">
            <summary>
            The mako engine
            </summary>
        </member>
        <member name="M:Board.DrawBoard.Diff(System.Int32,System.Int32)">
            <summary>
            Method to load an page, preprocess it with mako and show it.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Board.DrawBoard.UriToStrings(System.Collections.Generic.List{Board.Element})">
            <summary>
            Convert the list of elements to an csv list of uris
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Board.DrawBoard.IsHigher(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns an new int the value has no any higher value in the specified collection
            </summary>
            <param name="e">the number to look for</param>
            <param name="collection">the collection to look in</param>
            <returns></returns>
        </member>
        <member name="M:Board.DrawBoard.RemoveEntryAt(System.Int32)">
            <date>2011-04-24 16:18</date>
            <summary>
            Remove an entry at specified point. (index only applies to entries)
            </summary>
            <param name="pos">The index of the entry</param>
        </member>
        <member name="M:Board.DrawBoard.EntryIndexToRealIndex(System.Int32)">
            <summary>
            Converts the real index into an index for the entry
            </summary>
            <param name="index"></param>
            <returns> the real index of the entry, -1 if failed</returns>
        </member>
        <member name="M:Board.DrawBoard.RealIndexToEntryIndex(System.Int32)">
            <summary>
            Convert the physical index to real index
            </summary>
            <param name="index">the real index</param>
            <returns>The virtual entry index, -1 if failed or the index points to an item of not an entry</returns>
        </member>
        <member name="M:Board.DrawBoard.InsertEntryAt(System.Collections.Generic.List{Board.Element},System.Int32)">
            <date>2011-04-24 16:18</date>
            <summary>
            Insert item at position which is synchronised with the range of items only by entries
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Board.DrawBoard.InsertEntryAt(Board.Element,System.Int32)">
            <date>2011-04-24 16:18</date>
            <summary>
            Insert item at position which is synchronised with the range of items only by entries
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Board.DrawBoard.timrDownloadCheck_Tick(System.Object,System.EventArgs)">
            <summary>
            Check all ready receivers, run and delete them those are completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Board.DrawBoard.tmrViewUpdate_Tick(System.Object,System.EventArgs)">
            <summary>
            Update the view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Board.DrawBoard.ColumnHoverImage">
            <summary>
            Image for hovered column
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ActiveColumn">
            <summary>
            Image for active column
            </summary>
        </member>
        <member name="P:Board.DrawBoard.SelectionBg">
            <summary>
            Selection background color
            </summary>
        </member>
        <member name="P:Board.DrawBoard.SelectionFg">
            <summary>
            Selection foreground color
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ActiveBg">
            <summary>
            Background color of active element
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ActiveFG">
            <summary>
            Foreground color of active element
            </summary>
        </member>
        <member name="P:Board.DrawBoard.Toolbar">
            <summary>
            Background image for the toolbar
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ActiveSection">
            <summary>
            Background image for the active tab
            </summary>
        </member>
        <member name="P:Board.DrawBoard.SkinSelector">
            <summary>
            Defines an selector for an skin
            </summary>
        </member>
        <member name="P:Board.DrawBoard.Skin">
            <summary>
            Gets or sets the active skin. Skin are applied immediately on assignment
            </summary>
        </member>
        <member name="E:Board.DrawBoard.AfterNavigating">
            <summary>
            Occurs when the board is navigating to an new uri. 
            </summary>
        </member>
        <member name="E:Board.DrawBoard.BeginNavigating">
            <summary>
            Occurs when the navigation has been finished. The first parameteer sender wwill provide an instance of MakoEngine
            </summary>
        </member>
        <member name="P:Board.DrawBoard.Alternate">
            <summary>
            Gets or sets if the rows should aternate or have dividers
            </summary>
        </member>
        <member name="P:Board.DrawBoard.Views">
            <summary>
            The view hiearchy. All views called has their address attached to it, before reloading checking the list for possible
            view already exist
            </summary>
        </member>
        <member name="P:Board.DrawBoard.History">
            <summary>
            History of view for stack
            </summary>
        </member>
        <member name="P:Board.DrawBoard.Post">
            <summary>
            Forward history
            </summary>
        </member>
        <member name="P:Board.DrawBoard.currentSection">
            <summary>
            Current section on the specific view without interfering with history
            </summary>
        </member>
        <member name="P:Board.DrawBoard.CurrentSection">
            <summary>
            Current section on the specific view
            </summary>
        </member>
        <member name="P:Board.DrawBoard.CurSection">
            <summary>
            Returns the instance to the current active section
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ViewBuffer">
            <summary>
            Get the list of elements for the current view
            </summary>
        </member>
        <member name="E:Board.DrawBoard.Loaded">
            <summary>
            Should do an action on the javascript handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Board.DrawBoard.ItemClicked">
            <summary>
            Even raised when an user clicks an object
            </summary>
        </member>
        <member name="E:Board.DrawBoard.LinkClick">
            <summary>
            Raises when an user clicks an link
            </summary>
        </member>
        <member name="E:Board.DrawBoard.MakoGeneration">
            <summary>
            Occurs when the mako template engine has been init
            </summary>
        </member>
        <member name="E:Board.DrawBoard.BeginDownloadImage">
            <summary>
            Occurs when an image is begin to be downloaded. Runs on another thread
            </summary>
        </member>
        <member name="E:Board.DrawBoard.BeginReorder">
            <summary>
            Occurs when items are begin to be reordered.
            </summary>
        </member>
        <member name="E:Board.DrawBoard.FinishedReorder">
            <summary>
            Occura when items has finished reordering
            </summary>
        </member>
        <member name="P:Board.DrawBoard.CurrentCollection">
            <summary>
            An shortcut to the current collection of elements
            </summary>
        </member>
        <member name="P:Board.DrawBoard.SelectedIndex">
            <summary>
            Gets and sets the selected index . Returns -1 if no entries was found. Applies only with elements of type "entry".
            </summary>
        </member>
        <member name="P:Board.DrawBoard.Focus">
            <summary>
            Decides if control has focus
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ScrollX">
            <summary>
            Scroll X (Not in use yeat)
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ScrollY">
            <summary>
            The vertical scroll range
            </summary>
        </member>
        <member name="P:Board.DrawBoard.FontFace">
            <summary>
            The default typeface to use for the view
            </summary>
        </member>
        <member name="P:Board.DrawBoard.HoveredElement">
            <summary>
            The element the mouse cursor is hovering on
            </summary>
        </member>
        <member name="P:Board.DrawBoard.scroll_space">
            <summary>
            Gets the space of the scrollY
            </summary>
        </member>
        <member name="P:Board.DrawBoard.free_height">
            <summary>
             Gets the free space of the thumb.
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ThumbSize">
            <summary>
            Gets the size of the thumb
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ScrollOffset">
            <summary>
            Gets the scroll offset
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ScrollStep">
            <summary>
            The step of the scrollY in the offset
            </summary>
        </member>
        <member name="P:Board.DrawBoard.MaxScrollY">
            <summary>
            Returns the maximum scrollY
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ThumbScrollY">
            <summary>
            Sets the scroll Y
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ScrollBarY">
            <summary>
            Scrollbar belonging to the view
            </summary>
        </member>
        <member name="P:Board.DrawBoard.GrabbedElements">
            <summary>
            Element grabbed for drag'n drop
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Board.DrawBoard.Entries" -->
        <member name="T:Board.DrawBoard.EntrySorter">
            <summary>
            Basic sorting of entries
            </summary>
        </member>
        <member name="T:Board.DrawBoard.IListSorter">
            <summary>
            Interface for sortering. 
            </summary>
        </member>
        <member name="M:Board.DrawBoard.IListSorter.CompareElement(Board.Element,Board.Element,System.String)">
            <summary>
            Compare elements
            </summary>
            <param name="src">Element to compare</param>
            <param name="target">Target element to compare</param>
            <returns>if src is before target</returns>
        </member>
        <member name="M:Board.DrawBoard.EntrySorter.CompareElement(Board.Element,Board.Element,System.String)">
            <summary>
            Compares two elements of type entry only, otherwise left them untouched.
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Board.DrawBoard.PlaybackStartEvent">
            <summary>
            Delegate for playback start event handlers
            </summary>
            <param name="sender">the board where the event is haping on</param>
            <param name="Url">An url to the object which request playback</param>
            <returns>should return true if the playback can be started, if not return FALSE</returns>
        </member>
        <member name="T:Board.DrawBoard.NavigateEventHandler">
            <summary>
            Delegate for events relating to navigation
            </summary>
            <param name="sender">the Spofity instance resposible for the new view</param>
            <param name="uri">the uri for navigation</param>
        </member>
        <member name="T:Board.DrawBoard.ToolMenuItem">
            <summary>
            Shortcut menuitem class, for instansiating shortcut menus from scripts
            </summary>
        </member>
        <member name="T:Board.DrawBoard.LinkClicked">
            <summary>
            Raises when an object with an href clicked
            </summary>
            <param name="sender"></param>
            <param name="link"></param>
        </member>
        <member name="T:Board.DrawBoard.ItemClick">
            <summary>
            Delegate for handling object click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Board.DrawBoard.ItemDoubleClick">
            <summary>
            Delegate for handling object double click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Board.DrawBoard.View">
            <summary>
            Class of an view instance
            </summary>
        </member>
        <member name="F:Board.DrawBoard.View.Name">
            <summary>
            The name of the view, for measure
            </summary>
        </member>
        <member name="F:Board.DrawBoard.View.Address">
            <summary>
            The adress to the view
            </summary>
        </member>
        <member name="F:Board.DrawBoard.View.Argument">
            <summary>
            The argument provided to the view
            </summary>
        </member>
        <member name="F:Board.DrawBoard.View.Content">
            <summary>
            The Spofity class instance of the content
            </summary>
        </member>
        <member name="P:Board.DrawBoard.View.Section">
            <summary>
            The section of the view
            </summary>
        </member>
        <member name="P:Board.DrawBoard.View.Loaded">
            <summary>
            Gets if the View has been loaded, eg. the Content is not null
            </summary>
        </member>
        <member name="T:Board.DrawBoard.MakoCreateEventHandler">
            <summary>
            Delegate which manage events for mako creation
            </summary>
            <param name="sender">the current instance to mako</param>
            <param name="e">eventargs</param>
        </member>
        <member name="T:Board.DrawBoard.ViewErrorEventHandler">
            <summary>
            Delegate for invalid view events
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Board.DrawBoard.ViewErrorArgs">
            <summary>
            Event args for invalid view
            </summary>
        </member>
        <member name="T:Board.DrawBoard.PlayQueue">
            <summary>
            Class for play queue
            </summary>
        </member>
        <member name="T:Board.DrawBoard.ImageDownloadEventHandler">
            <summary>
            Delegate for event relating to image downlods
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Board.DrawBoard.ElementMoveEventArgs">
            <summary>
            Event args for element move event handler
            </summary>
        </member>
        <member name="T:Board.DrawBoard.ElementMoveEventHandler">
            <summary>
            Delegate for element move event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Board.DrawBoard.ItemReorderEventArgs">
            <date>2011-04-24 15:21</date>
            <summary>
            Event args for item reordering
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ItemReorderEventArgs.Cancel">
            <summary>
            If in begin mode, Gets and sets whether the operation should be cancelled or not
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ItemReorderEventArgs.OldPos">
            <summary>
            Old position
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ItemReorderEventArgs.NewPosition">
            <summary>
            New Position
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ItemReorderEventArgs.Collection">
            <summary>
            The collection of elements to reorder
            </summary>
        </member>
        <member name="T:Board.DrawBoard.ItemReorderEvenHandler">
            <date>2011-04-24 15:21</date>
            <summary>
            Delegate for item reordering
            </summary>
        </member>
        <member name="T:Board.DrawBoard.ElementDragEventArgs">
            <summary>
            Event args for elementDragEvent
            </summary>
        </member>
        <member name="F:Board.DrawBoard.ElementDragEventArgs.AllowedEffects">
            <summary>
            The allowed effect for the operation
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ElementDragEventArgs.Destination">
            <summary>
            The element currently hovering
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ElementDragEventArgs.Position">
            <summary>
            The position of the mouse cursor, in client coordinates
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ElementDragEventArgs.Index">
            <summary>
            The index of the item
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ElementDragEventArgs.View">
            <summary>
            The view the element belongs to
            </summary>
        </member>
        <member name="P:Board.DrawBoard.ElementDragEventArgs.Section">
            <summary>
            The section the event is raising on
            </summary>
        </member>
        <member name="T:Board.DrawBoard.ElementDragEventHandler">
            <summary>
            Event handler for dragging over child elements
            </summary>
            <param name="sender">the sender board</param>
            <param name="e"></param>
        </member>
        <member name="T:Board.MyClass">
            <summary>
            Description of MyClass.
            </summary>
        </member>
        <member name="T:Board.IScriptEngine">
            <summary>
            Interface for dealing with various script engines to connect. All engines must be wrapped by this interface.
            </summary>
        </member>
        <member name="M:Board.IScriptEngine.Run(System.String)">
            <summary>
            This function is called by the preprocesor after the code has been compiled from the preprocessing template
            </summary>
            <param name="scriptCode">The string with the javascript code</param>
            <returns>True if sucess, false if failed </returns>
        </member>
        <member name="M:Board.IScriptEngine.Invoke(System.String,System.Object[])">
            <summary>
            Invoke an function in the client script from the executable code
            </summary>
            <param name="Function"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Board.IScriptEngine.SetVariable(System.String,System.Object)">
            <summary>
            Thus method is called to make an instance of an certain object accessible for the scripting object.
            </summary>
            <param name="variableName"></param>
            <param name="varInstance"></param>
        </member>
        <member name="M:Board.IScriptEngine.SetFunction(System.String,System.Delegate)">
            <summary>
            This method is called to set an function to be accessible by the functionName for the script once Executed.
            </summary>
            <param name="functionName"></param>
            <param name="functionPointer"></param>
        </member>
        <member name="F:Board.JavaScriptEngine.scriptEngine">
            <summary>
            The instance of the Jint parser
            </summary>
        </member>
        <member name="M:Board.JavaScriptEngine.Invoke(System.String,System.Object[])">
            <summary>
            Invokes an user function
            </summary>
            <param name="func"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Board.JavaScriptEngine.Run(System.String)">
            <summary>
            This function is called by the preprocesor after the code has been compiled from the preprocessing template
            </summary>
            <param name="scriptCode">The string with the javascript code</param>
            <returns>True if sucess, false if failed </returns>
        </member>
        <member name="M:Board.JavaScriptEngine.SetVariable(System.String,System.Object)">
            <summary>
            Thus method is called to make an instance of an certain object accessible for the scripting object.
            </summary>
            <param name="variableName">The name of the instance at the script level</param>
            <param name="varInstance">The object to send</param>
        </member>
        <member name="M:Board.JavaScriptEngine.SetFunction(System.String,System.Delegate)">
            <summary>
            This method is called to set an function to be accessible by the functionName for the script once Executed.
            </summary>
            <param name="functionName">The desired alias for the function at script level</param>
            <param name="functionPointer">The delegate for the function to use at script</param>
        </member>
    </members>
</doc>
